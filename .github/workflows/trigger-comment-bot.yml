name: 🚀 Trigger Comment Bot on New Post

on:
  push:
    branches:
      - main
    paths:
      - 'src/posts/**.mdx' # src/posts 폴더 하위의 .mdx 파일 변경 시에만 실행

jobs:
  trigger-on-new-post:
    name: Check for New Posts and Trigger
    runs-on: ubuntu-latest
    steps:
      # Git 히스토리를 가져와 파일 변경 내역을 비교하기 위해 필요합니다.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # HEAD^와 비교하기 위해 이전 커밋 기록까지 가져옵니다.
          fetch-depth: 2

      # 이번 push에서 '추가(Added)'된 .mdx 파일 목록을 찾습니다.
      - name: Get list of new mdx files
        id: get_new_posts
        run: |
          # git diff 명령어로 '추가(A)'된 'src/posts/**/*.mdx' 파일 목록을 찾습니다.
          # || true 는 파일이 없을 때 에러가 발생하는 것을 방지합니다.
          FILES=$(git diff --name-only --diff-filter=A HEAD^ HEAD | grep "src/posts/.*\.mdx$" || true)

          # 찾은 파일 목록을 다음 단계에서 사용할 수 있도록 OUTPUT으로 설정합니다.
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 새로 추가된 파일이 있을 때만 웹훅을 호출합니다.
      - name: Trigger webhook for each new post
        if: steps.get_new_posts.outputs.files != ''
        run: |
          # 여러 파일이 한 번에 추가될 수 있으므로, for 루프를 사용해 각각 처리합니다.
          # 파일 목록을 배열로 변환하여 처리
          IFS=$'\n' read -d '' -r -a FILES_ARRAY <<< "${{ steps.get_new_posts.outputs.files }}"

          for file in "${FILES_ARRAY[@]}"; do
            # 파일 경로에서 정보 추출
            # 예: src/posts/weekly/250406/content_ja.mdx
            
            # 카테고리와 날짜 추출 (올바른 인덱스 사용)
            CATEGORY=$(echo "$file" | awk -F'/' '{print $3}')
            DATE=$(echo "$file" | awk -F'/' '{print $4}')
            
            # 언어 코드 추출 (content_ja.mdx → ja)
            LANG=$(echo "$file" | awk -F'/' '{print $5}' | sed 's/content_//' | sed 's/\.mdx$//')

            # 우리 API 형식에 맞게 post_id 생성 (언어를 앞으로)
            POST_ID="${LANG}/${CATEGORY}/${DATE}"
            URL="https://mintora.me/blog/${LANG}/${CATEGORY}/${DATE}"
            
            echo "Triggering for Post ID: ${POST_ID}"
            echo "Category: ${CATEGORY}"
            echo "Date: ${DATE}"
            echo "Language: ${LANG}"
            echo "URL: ${URL}"
            
            # JSON 본문과 함께 웹훅 POST 요청을 보냅니다.
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"post_id\": \"${POST_ID}\", \"url\": \"${URL}\"}" \
              ${{ secrets.WEBHOOK_URL }}
          done
